<!-- app/views/quizzes/show.html.erb -->
<h1><%= @quiz.title %></h1>

<% if @current_question %>
  <div id="question-container" class="question-box">
    <%= render partial: 'questions/question', locals: { question: @current_question, choices: @choices, next_question_id: @next_question_id, previous_question_id: @previous_question_id, question_index: @questions.index(@current_question) + 1, total_questions: @questions.size } %>
  </div>

  <div class="controls">
    <button id="prev-btn" data-url="#">前の問題へ</button>
    <button id="next-btn" data-url="#">次の問題へ</button>
    <%= button_to '中断する', save_quiz_path(@quiz), method: :post, class: 'button' %>
    <%= button_to '採点する', grade_quiz_path(@quiz), method: :post, class: 'button' %>
  </div>
<% else %>
  <p>퀴즈에 질문이 없습니다.</p>
  <%= link_to '퀴즈 목록으로 돌아가기', quizzes_path, class: 'button' %>
<% end %>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const loadQuestion = (url) => {
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
              .then(response => {
                  if (!response.ok) {
                      throw new Error(`HTTP error! status: ${response.status}`);
                  }
                  return response.text();
              })
              .then(data => {
                  document.querySelector('#question-container').innerHTML = data;
                  updateControls();
              })
              .catch(error => console.error('Error:', error));
        };

        const updateControls = () => {
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            const questionContainer = document.querySelector('#question-container > div');
            const nextQuestionId = questionContainer.dataset.nextQuestionId;
            const prevQuestionId = questionContainer.dataset.prevQuestionId;

            console.log('Pre Question ID:', prevQuestionId);
            console.log('Next Question ID:', nextQuestionId);

            if (prevBtn) {
                if (prevQuestionId && prevQuestionId !== "") {
                    prevBtn.style.display = 'inline-block';
                    prevBtn.dataset.url = `/questions/${prevQuestionId}.js`;
                } else {
                    prevBtn.style.display = 'none';
                }
                prevBtn.removeEventListener('click', handlePrevClick);
                prevBtn.addEventListener('click', handlePrevClick);
            }

            if (nextBtn) {
                if (nextQuestionId && nextQuestionId !== "") {
                    nextBtn.style.display = 'inline-block';
                    nextBtn.dataset.url = `/questions/${nextQuestionId}.js`;
                } else {
                    nextBtn.style.display = 'none';
                }
                nextBtn.removeEventListener('click', handleNextClick);
                nextBtn.addEventListener('click', handleNextClick);
            }
        };

        const handlePrevClick = (event) => {
            event.preventDefault();
            const prevBtn = event.currentTarget;
            if (prevBtn.dataset.url !== '#') {
                loadQuestion(prevBtn.dataset.url);
            }
        };

        const handleNextClick = (event) => {
            event.preventDefault();
            const nextBtn = event.currentTarget;
            const form = document.querySelector('.question-form');
            if (!form) {
                console.error('폼을 찾을 수 없습니다');
                return;
            }
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'PATCH',
                body: formData,
                headers: {
                    'Accept': 'application/javascript',
                },
                credentials: 'include'
            })
              .then(response => {
                  if (response.ok) {
                      return response.text();
                  } else {
                      return Promise.reject(new Error('질문 업데이트 실패'));
                  }
              })
              .then(data => {
                  document.querySelector('#question-container').innerHTML = data;
                  updateControls();
              })
              .catch(error => {
                  console.error('에러 발생:', error);
              });
        };

        updateControls();
    });
</script>
